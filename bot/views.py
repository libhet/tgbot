from __future__ import annotations

from collections import defaultdict
from datetime import date
from typing import Iterable, Mapping, Sequence

from app.schemas import CalendarDay, ExerciseRead, PracticeSessionRead


def render_exercise_list(exercises: Sequence[ExerciseRead]) -> str:
    if not exercises:
        return "‚ùì –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."
    lines: list[str] = ["üìã –°–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:"]
    for exercise in exercises:
        sessions_count = len(exercise.sessions)
        lines.append(
            f"\n‚Ä¢ <b>{exercise.title}</b> ({exercise.type}, —Å—Ç–∞—Ç—É—Å: {exercise.status})"
        )
        if exercise.description:
            lines.append(exercise.description)
        if sessions_count:
            lines.append(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Å–µ—Å—Å–∏–π: {sessions_count}")
    return "\n".join(lines)


def render_calendar_view(
    days: Iterable[CalendarDay], *, exercise_lookup: Mapping[int, str] | None = None
) -> str:
    days = list(days)
    if not days:
        return "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø–µ—Ä–≤—É—é —Å–µ—Å—Å–∏—é!"

    grouped: dict[date, list[PracticeSessionRead]] = defaultdict(list)
    for day in days:
        grouped[day.date].extend(day.sessions)

    lookup = dict(exercise_lookup or {})
    lines = ["üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏:"]
    for day, sessions in sorted(grouped.items()):
        lines.append(f"\n<b>{day.strftime('%d.%m.%Y')}</b>")
        for session in sessions:
            title = session.exercise_title or lookup.get(session.exercise_id)
            if not title:
                title = f"—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ #{session.exercise_id}"
            lines.append(f"- {title} (—Å—Ç–∞—Ç—É—Å: {session.status})")
    return "\n".join(lines)
